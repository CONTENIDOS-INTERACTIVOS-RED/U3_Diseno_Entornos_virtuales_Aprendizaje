{"remainingRequest":"/home/runner/work/U3_Diseno_Entornos_virtuales_Aprendizaje/U3_Diseno_Entornos_virtuales_Aprendizaje/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Diseno_Entornos_virtuales_Aprendizaje/U3_Diseno_Entornos_virtuales_Aprendizaje/src/views/curso/Tema1.vue?vue&type=template&id=54f43222&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Diseno_Entornos_virtuales_Aprendizaje/U3_Diseno_Entornos_virtuales_Aprendizaje/src/views/curso/Tema1.vue","mtime":1746429836786},{"path":"/home/runner/work/U3_Diseno_Entornos_virtuales_Aprendizaje/U3_Diseno_Entornos_virtuales_Aprendizaje/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Diseno_Entornos_virtuales_Aprendizaje/U3_Diseno_Entornos_virtuales_Aprendizaje/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Diseno_Entornos_virtuales_Aprendizaje/U3_Diseno_Entornos_virtuales_Aprendizaje/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Diseno_Entornos_virtuales_Aprendizaje/U3_Diseno_Entornos_virtuales_Aprendizaje/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Diseno_Entornos_virtuales_Aprendizaje/U3_Diseno_Entornos_virtuales_Aprendizaje/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}